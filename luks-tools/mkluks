#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"


_global_variables() {
  [[ -v TERMUX_VERSION ]] || \
    TERMUX_VERSION=""
  build_date=""
  key_file=""
  device_label=""
  device_fsuuid=""
  device_integrity=""
  integrity_function=""
  grub_compatibility=""
  read_only=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "cryptsetup"
  _check_cmd \
    "uuidgen" \
    "util-linux"
}

_detect_integrity_support() {
  local \
    _integrity='true' \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    _integrity='false'
  fi
  echo \
    "${_integrity}"
}


_get_sector_size() {
  local \
    _size=4096 \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    _sector_size=512
  fi
  echo \
    "${_sector_size}"
}

_mkluks() {
  local \
    _device="${1}" \
    _label="${2}" \
    _key_file="${3}" \
    _fsuuid="${4}" \
    _integrity="${5}" \
    _integrity_function="${6}" \
    _grub_compatibility="${7}" \
    _read_only="${8}" \
    _opts=() \
    _config_cmd=() \
    _config_opts=() \
    _format_cmd=() \
    _format_opts=() \
    _fsuuid_set_cmd=() \
    _label_opts=() \
    _cryptsetup_opts=() \
    _key_size="512" \
    _sector_size \
    _retries="0" \
    _tmpdir \
    _os
  shift \
    7
  _cryptsetup_opts=(
    "$@"
  )
  [[ ! -e "${_device}" ]] && \
    _msg_error \
      "device file '${_device}' does not exist" \
      1
  [[ "${_grub_compatibility}" == "true" ]] && \
  [[ "${_integrity}" != "" ]] && \
    _msg_error \
      "GRUB doesn't support integrity layer" \
      1
  _sector_size="$( \
    _get_sector_size)"
  _tmpdir="$( \
    mktemp \
      -d)"
  _opts=(
    --type luks2
  )
  _format_opts=(
    --sector-size="${_sector_size}"
    --key-size="${_key_size}"
  )
  if [[ "${_key_file}" != "" ]]; then
    _opts+=(
      --key-file=\'"${_key_file}"\'
    )
  fi
  if [[ "${_label}" != "" ]]; then
    _config_opts+=(
      --label=\'"${_label}"\'
    )
  fi
  if [[ "${_grub_compatibility}" == "true" ]]; then
    _format_opts+=(
      "--pbkdf=pbkdf2"
    )
  fi
  if \
    [[ "${_grub_compatibility}" == "false" ]] && \
    [[ "${_integrity}" != "" ]]; then
    _format_opts+=(
      "--pbkdf-memory=256"
      "--integrity=${_integrity_function}"
    )
  fi
  if [[ "${_read_only}" == "true" ]]; then
    _config_opts+=(
      --persistent
      --integrity-no-journal
    )
  fi
  _format_cmd=(
    cryptsetup
      -q
      -y
      luksFormat
        "${_opts[@]}"
        "${_format_opts[@]}"
        "${_cryptsetup_opts[@]}"
        "${_device}"
  )
  while \
    ( ! eval \
          "${_format_cmd[*]}" ) && \
    (( "${_retries}" < 10 )); do
    sleep 1
    _retries=$(( \
      _retries + 1))
  done
  _config_cmd=(
    cryptsetup
      config
        "${_opts[@]}"
        "${_config_opts[@]}"
        "${_device}"
  )
  _retries=0
  while \
    ( ! eval \
          "${_config_cmd[*]}" ) && \
    (( "${_retries}" < 10 )); do
    sleep 1
    _retries=$(( \
      _retries + 1))
  done
  _retries=0
  _fsuuid_set_cmd=(
    cryptsetup
      -q
      -y
      luksUUID
        --uuid="${_fsuuid}"
	"${_device}"
  )
  _retries=0
  [[ "${_fsuuid}" != "" ]] && \
    while \
     ( ! eval \
           "${_fsuuid_set_cmd[*]}" ) && \
    (( "${_retries}" < 10 )); do
     sleep 1
    _retries=$(( \
      _retries + 1))
   done
}

# Set defaults and, if present, overrides
# from mkluks command line option parameters
_set_overrides() {
  _set_override \
    "build" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "grub" \
    "compatibility" \
    "false"
  _set_override \
    "read" \
    "only" \
    "false"
  _set_override \
    "device" \
    "label" \
    "label"
  _set_override \
    "key" \
    "file" \
    ""
  _set_override \
    "device" \
    "fsuuid" \
    "$(uuidgen)"
  _set_override \
    "device" \
    "integrity" \
    "$(_detect_integrity_support)"
  _set_override \
    "integrity" \
    "function" \
    "hmac-sha512"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage:
  $(_get "app" "name")
    [options]
    <image>

  options:
     -k <key file>        Provide a key file
                          instead of a passphrase.
     -l <label>           Label for the LUKS volume.
			  Default: $(_get "device" "label")
     -u <fsuuid>          Set specific UUID far the volume.
			  Default: $(_get "device" "fsuuid")
     -r                   Set the volume to be
                          read-only.
			  Default: $(_get "read" "only")
     -T <bool>            Whether to enable integrity layer.
			  Default: $(_get "device" "integrity")
     -t <function>        Integrity function, full list
                          in cryptsetup manual.
			  Default: $(_get "integrity" "function")
     -g                   Whether the volume has to be
                          compatible with GRUB.
			  Default: $(_get "grub" "compatibility")
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _pygmentize_opts=() \
    _key
  _pygmentize_opts=(
    -l bash
    -O "style=emacs,linenos=1"
  )
  _key="$( \
    _get \
      "key" \
      "file")"
  if [[ "${_key}" == "" ]]; then
    _key="Passphrase"
  fi
  _label="$( \
    _get \
      "device" \
      "label")"
  if [[ "${_key}" == "" ]]; then
    _key="None"
  fi
  _msg_info "${app_name} configuration:"
  _msg_info "              Build  date:   $(_get "build" "date")"
  _msg_info "             Device label:   ${device_label:-None}"
  _msg_info "                 Key file:   ${key_file:-Passphrase}"
  _msg_info "         File system UUID:   ${device_fsuuid:-None}"
  _msg_info "                Integrity:   ${device_integrity}"
  _msg_info "       Integrity function:   ${integrity_function}"
  _msg_info "       GRUB compatibility:   $(_get "grub" "compatibility")"
  _msg_info "                Read only:   $(_get "read" "only")"
  _msg_info "     Extra format options:   "
  _display_flags                          "${cryptsetup_args[*]}"
  _msg_info ""
  _msg_info "      Device file:"
  _msg_info "        ${device}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'k:l:u:T:t:rgcvh?' \
    arg; do
  case \
    "${arg}" in
    k) override_key_file="${OPTARG}" ;;
    l) override_device_label="${OPTARG}" ;;
    u) override_device_fsuuid="${OPTARG}" ;;
    T) override_device_integrity="${OPTARG}" ;;
    t) override_integrity_function="${OPTARG}" ;;
    r) override_read_only="true" ;;
    g) override_grub_compatibility="true" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _set_overrides && \
  _usage \
    1
device="${1}"
shift \
  1
cryptsetup_args=(
  "$@"
)
_set_overrides
device="$( \
  realpath \
    "${device}")"
[[ -e "${key_file}" ]] && \
  key_file="$( \
    realpath \
      "${key_file}")"
_show_config
_mkluks \
  "${device}" \
  "${device_label}" \
  "${key_file}" \
  "${device_fsuuid}" \
  "${device_integrity}" \
  "${integrity_function}" \
  "${grub_compatibility}" \
  "${read_only}" \
  "${cryptsetup_args[@]}"
