#!/usr/bin/env bash

_globals() {
  set \
    -e \
    -u
  shopt \
    -s \
      extglob
  
  # Control the environment
  umask \
    0022
  export \
    LC_ALL="C.UTF-8"
  # LC_ALL=C.UTF-8, unlike LC_ALL=C,
  # does not override LANGUAGE.
  # See 
  # https://sourceware.org/bugzilla/show_bug.cgi?id=16621
  # and 
  # https://savannah.gnu.org/bugs/?62815
  [[ -v LANGUAGE ]] && \
    unset \
      LANGUAGE
  [[ -v SOURCE_DATE_EPOCH ]] || \
    printf \
      -v SOURCE_DATE_EPOCH \
      '%(%s)T' -1
  export \
    SOURCE_DATE_EPOCH
  
  # Get script path
  _path="$( \
    export \
      _OLDPWD="$(pwd)" && \
    cd \
      "$( \
	dirname \
          "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD

  # Set application name from the script's file name
  app_name="${0##*/}"
}

_global_variables() {
  [[ -v LDFLAGS ]] || \
     LDFLAGS=""
  [[ -v CPPFLAGS ]] || \
    CPPFLAGS=""
  [[ -v CFLAGS ]] || \
    CFLAGS=""
  [[ -v CXXFLAGS ]] || \
    CXXFLAGS=""
  [[ -v TERMUX_VERSION ]] || \
    TERMUX_VERSION=""
  key_file=""
  color=""
  quiet=""
}


# Show an INFO message
# $1: message string
_msg_info() {
  local \
    _msg=(
      "$@"
    ) \
    _line
  [[ "${quiet}" == "y" ]] || \
    for _line \
      in "${_msg[@]}"; do
      _printf \
        '[%s] INFO: %s\n' \
        "${app_name}" \
        "${_line}"
    done
}

# Show a WARNING message
# $1: message string
_msg_warning() {
  local \
    _msg="${1}"
  _printf \
    '[%s] WARNING: %s\n' \
    "${app_name}" \
    "${_msg}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
  local \
    _msg="${1}" \
    _error=${2}
  _printf \
    '[%s] ERROR: %s\n' \
    "${app_name}" \
    "${_msg}" >&2
  if (( _error > 0 )); then
    exit "${_error}"
  fi
}

# Sets object string attributes
# $1: object
# $2: an object string attribute
# $3: a value
_set() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _type

  printf \
    -v "${_obj}_${_var}" \
    "${_value}"
}

# Returns type ('string', 'list', 'dict') given
# its name
# $1: an object
_get_type() {
  local \
    _obj="${1}" \
    _type="string" \
    _declare
  _declare="$( \
    declare \
      -p \
        "${_obj}" 2>&1)"
  [[ \
    "${_declare}" == \
    *"declare:"*"${_obj}"*": not found" ]] && \
    _type="undefined"
  [[ \
    "${_declare}" == \
    "declare -A "* ]] && \
    _type="dict"
  [[ \
    "${_declare}" == \
    "typeset -a"* ]] && \
    _type="array"
  echo \
    "${_type}"
}

# Returns an attribute value for a 
# given object
# $1: an object
# $2: an object attribute
_get() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _msg \
    _ref \
    _type \
    _target
  _target="${_obj}_${_var}"
  _ref="${_target}[@]"
  _type="$( \
    _get_type \
      "${_target}")"
  [[ "${_type}" == "undefined" ]] && \
    _msg=(
      "Attribute '${_var}' is not defined"
      "for object '${_obj}'") && \
    _msg_error \
      "${_msg[*]}" \
      1
  [[ "${_type}" == "dict" ]] && \
    echo \
      "${_obj[${_var}]}" && \
    return
  printf \
    "%s\n" \
    "${!_ref}"
}

_mkluks() {
  local \
    _key_file \
    _grub \
    _tmpdir
  _tmpdir="$( \
    mktemp \
      -d)"
  cryptsetup \
    --type luks2 \
    --sector-size=4096 \
    --keysize=512 \
    --pbkdf-memory=256 \
    --integrity='hmac-sha512' \
    --key-file="$()" \
    "${_volume}"
}

# Reassign an object variable
# if an override variable is defined;
# otherwise it defaults
# to an input default.
# $1: object
# $2: variable
# $3: default value
_set_override() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _default="${3}"
  if [[ -v "override_${_obj}_${_var}" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "$( \
        _get \
	  "override_${_obj}" \
          "${_var}")"
  elif [[ -z \
	    "$( \
	      _get \
	        "${_obj}" \
                "${_var}")" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "${_default}"
  fi
}

# Re-assign an object variable
# pointing to a path if an override variable
# is defined, otherwise it defaults to an input path
# $1: object
# $2: variable
# $3: value (a path)
_override_path() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _path
  _path="$( \
    realpath \
      -q -- \
      "${_value}" || \
      true)"
  [[ "${_path}" == "" ]] && \
    _msg_error \
      "${_value} is not a valid path." \
      1
  _set_override \
    "${_obj}" \
    "${_var}" \
    "${_value}"
  _set \
    "${_obj}" \
    "${_var}" \
    "$( \
      realpath -- \
        "$( \
	  _get \
	    "${_obj}" \
            "${_var}")")"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "grub" \
    "compatibility" \
    "false"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  IFS='' \
    read \
      -r \
      -d '' \
      usage_text << \
        ENDUSAGETEXT || true
usage: $(_get "app" "name") [options] <device>
  options:
     -k <key file>        Provide a key file
                          instead of a passphrase.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "$( \
      _get \
        "usage" \
	"text")"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      ${1}
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    build_date \
    _pygmentize_opts=()
  _pygmentize_opts=(
    -l bash
    -O style=emacs,linenos=1
  )
  TZ=UTC \
    printf \
      -v build_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} settings"
  _msg_info "       GRUB compatibility:   $(_get "grub" "compatibility")"
  _msg_info "          cryptsetup args:   "
  _display_flags                          "${_cryptsetup_args[*]}"
  _msg_info "      device file:"
  _msg_info "        ${_device}"
}

# Colorized print
_printf() {
  local \
    _args=()
    _pygmentize_opts=()
  _pygmentize_opts=(
    -g
    -O style=emacs
  )
  _args=(
      "$@"
  )
  _sho \
    "$( \
      printf \
        "${_args[@]}")" \
    "${_pygmentize_opts[@]}"
}

# Colorized Display function
_sho() {
  local \
    _text="${1}" \
    _pygmentize
  _pygmentize="$( \
    command \
      -v \
      "pygmentize"{,2} | \
      head \
        -n \
	1)"
  shift
  _pygmentize_opts=(
    "$@"
  )
  [[ "${color}" == "y" ]] && \
  [[ "${_pygmentize}" != "" ]] && \
    echo \
      "${_text}" | 
      "${_pygmentize}" \
        "${_pygmentize_opts[@]}" && \
    return
  printf \
    "%s\n" \
    "${_text}"
}

_globals
_global_variables

while \
  getopts \
    'k:c:vh?' \
    arg; do
  case \
    "${arg}" in
    k) override_key_file="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _usage \
	   1 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
_device="${1}"
shift 1
_cryptsetup_args=(
  "$@"
)
_set_overrides

_show_config
# _mkluks \
#   "${_device}" \
#   "${_cryptsetup_args[@]}"
