#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_globals() {
  local \
    _OLDPWD
  set \
    -e \
    -u
  shopt \
    -s \
      extglob

  # Control the environment
  umask \
    0022
  export \
    LC_ALL="C.UTF-8"
  # LC_ALL=C.UTF-8, unlike LC_ALL=C,
  # does not override LANGUAGE.
  # See 
  # https://sourceware.org/bugzilla/show_bug.cgi?id=16621
  # and 
  # https://savannah.gnu.org/bugs/?62815
  [[ -v LANGUAGE ]] && \
    unset \
      LANGUAGE
  [[ -v SOURCE_DATE_EPOCH ]] || \
    printf \
      -v \
        SOURCE_DATE_EPOCH \
      '%(%s)T' \
      -1
  export \
    SOURCE_DATE_EPOCH
  
  # Get script path
  # shellcheck disable=SC2005
  _path="$( \
    _OLDPWD="$( \
      pwd)" && \
    export \
      _OLDPWD && \
    cd \
      "$( \
	dirname \
          "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD
  # Set application name
  # from the script's file name
  app_name="${0##*/}"
}

_global_variables() {
  [[ -v LDFLAGS ]] || \
     LDFLAGS=""
  [[ -v CPPFLAGS ]] || \
    CPPFLAGS=""
  [[ -v CFLAGS ]] || \
    CFLAGS=""
  [[ -v CXXFLAGS ]] || \
    CXXFLAGS=""
  [[ -v TERMUX_VERSION ]] || \
    TERMUX_VERSION=""
  key_file=""
  device_label=""
  device_fsuuid=""
  device_integrity=""
  grub_compatibility=""
  read_only=""
  color=""
  quiet=""
}


# Show an INFO message
# $1: message string
_msg_info() {
  local \
    _msg=(
      "$@"
    ) \
    _fmt_line=() \
    _line
  [[ "${quiet}" == "y" ]] || \
    for _line \
      in "${_msg[@]}"; do
      # _fmt_line+=(
      #   "$( \
      #     printf \
      #       '[%s] INFO: %s\n' \
      #       "${app_name}" \
      #       "${_line}")"
      # )
      _printf \
        '[%s] INFO: %s\n' \
        "${app_name}" \
        "${_line}"
    done
    # _printf \
    #   "${_fmt_line[*]}"
}

# Show a WARNING message
# $1: message string
_msg_warning() {
  local \
    _msg=()
  _msg=(
    "${1}"
  )
  _printf \
    '[%s] WARNING: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
  local \
    _msg=(
      "${1}"
    ) \
    _error=${2}
  _printf \
    '[%s] ERROR: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
  if (( _error > 0 )); then
    exit "${_error}"
  fi
}

# Sets object string attributes
# $1: object
# $2: an object string attribute
# $3: a value
_set() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}"
  printf \
    -v "${_obj}_${_var}" \
    "%s" \
    "${_value}"
}

# Returns type ('string', 'list', 'dict') given
# its name
# $1: an object
_get_type() {
  local \
    _obj="${1}" \
    _type="string" \
    _declare
  _declare="$( \
    declare \
      -p \
        "${_obj}" 2>&1)"
  [[ \
    "${_declare}" == \
    *"declare:"*"${_obj}"*": not found" ]] && \
    _type="undefined"
  [[ \
    "${_declare}" == \
    "declare -A "* ]] && \
    _type="dict"
  [[ \
    "${_declare}" == \
    "typeset -a"* ]] && \
    _type="array"
  echo \
    "${_type}"
}

# Returns an attribute value for a 
# given object
# $1: an object
# $2: an object attribute
_get() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _msg \
    _ref \
    _type \
    _target
  _target="${_obj}_${_var}"
  _ref="${_target}[@]"
  _type="$( \
    _get_type \
      "${_target}")"
  [[ "${_type}" == "undefined" ]] && \
    _msg=(
      "Attribute '${_var}' is not defined"
      "for object '${_obj}'") && \
    _msg_error \
      "${_msg[*]}" \
      1
  [[ "${_type}" == "dict" ]] && \
    echo \
      "${_obj[${_var}]}" && \
    return
  printf \
    "%s\n" \
    "${!_ref}"
}

_check_cmd(){
  local \
    _cmd="${1}" \
    _cmd_var \
    _flag="" \
    _pkg
  shift \
    1
  _pkg="$@"
  _cmd_var="$( \
    echo \
      "${_cmd}" | \
      sed \
        "s/-/_/g")"
  command \
     -v \
     "${_cmd}" &> /dev/null && \
    printf \
      -v \
        "_${_cmd_var}" \
      "$( \
        command \
          -v \
          "${_cmd}")" && \
    _flag=true
  [ -e "${_path}/${_cmd}" ] && \
    printf \
      -v "_${_cmd_var}" \
      "${_path}/${_cmd}" && \
    _flag=true
  if [[ "${_flag}" != "true" ]]; then
    if [[ "${_pkg}" != "" ]]; then
      _cmd="${_pkg}"
    fi
    _msg_error \
      "Install ${_cmd}" \
      1
  fi
}

_requirements() {
  _check_cmd \
    "cryptsetup"
}


_mkluks() {
  local \
    _device="${1}" \
    _label="${2}" \
    _key_file="${3}" \
    _fsuuid="${4}" \
    _integrity="${5}" \
    _grub_compatibility="${6}" \
    _read_only="${7}" \
    _opts=() \
    _config_cmd=() \
    _config_opts=() \
    _format_cmd=() \
    _format_opts=() \
    _fsuuid_set_cmd=() \
    _label_opts=() \
    _cryptsetup_opts=() \
    _key_size="512" \
    _retries="0" \
    _tmpdir
  shift 7
  _cryptsetup_opts=(
    "$@"
  )
  [[ ! -e "${_device}" ]] && \
    _msg_error \
      "device file '${_device}' does not exist" \
      1
  [[ "${_grub_compatibility}" == "true" ]] && \
  [[ "${_integrity}" != "" ]] && \
    _msg_error \
      "GRUB doesn't support integrity layer" \
      1
  _tmpdir="$( \
    mktemp \
      -d)"
  _opts=(
    --type luks2
    --sector-size=4096
    --key-size="${_key_size}"
  )
  if [[ "${_key_file}" != "" ]]; then
    _opts+=(
      --key-file=\'"${_key_file}"\'
    )
  fi
  if [[ "${_label}" != "" ]]; then
    _config_opts+=(
      --label=\'"${_label}"\'
    )
  fi
  if [[ "${_grub_compatibility}" == "true" ]]; then
    _format_opts+=(
      "--pbkdf=pbkdf2"
    )
  fi
  if \
    [[ "${_grub_compatibility}" == "false" ]] && \
    [[ "${_integrity}" != "" ]]; then
    _format_opts+=(
      "--pbkdf-memory=256"
      "--integrity=${_integrity}"
    )
  fi
  if [[ "${_read_only}" == "true" ]]; then
    _config_opts+=(
      --persistent
      --integrity-no-journal
    )
  fi
  _format_cmd=(
    cryptsetup
      -q
      -y
      luksFormat
        "${_opts[@]}"
        "${_format_opts[@]}"
        "${_cryptsetup_opts[@]}"
        "${_device}"
  )
  while \
    ( ! eval \
          "${_format_cmd[*]}" ) && \
    (( "${_retries}" < 10 )); do
    sleep 1
    retries=$((retries + 1))
  done
  _config_cmd=(
    cryptsetup
      config
        "${_opts[@]}"
        "${_config_opts[@]}"
        "${_device}"
  )
  _retries=0
  while \
    ( ! eval \
          "${_config_cmd[*]}" ) && \
    (( "${_retries}" < 10 )); do
    sleep 1
    retries=$((retries + 1))
  done
  _retries=0
  _fsuuid_set_cmd=(
    cryptsetup
      -q
      -y
      luksUUID
        --uuid="${_fsuuid}"
	"${_device}"
  )
  _retries=0
  [[ "${_fsuuid}" != "" ]] && \
    while \
     ( ! eval \
           "${_fsuuid_set_cmd[*]}" ) && \
    (( "${_retries}" < 10 )); do
     sleep 1
    retries=$((retries + 1))
   done
}

# Reassign an object variable
# if an override variable is defined;
# otherwise it defaults
# to an input default.
# $1: object
# $2: variable
# $3: default value
_set_override() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _default="${3}"
  if [[ -v "override_${_obj}_${_var}" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "$( \
        _get \
	  "override_${_obj}" \
          "${_var}")"
  elif [[ -z \
	    "$( \
	      _get \
	        "${_obj}" \
                "${_var}")" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "${_default}"
  fi
}

# Re-assign an object variable pointing to
# a path if an override variable is defined,
# otherwise it defaults to an input path
# $1: object
# $2: variable
# $3: value (a path)
_override_path() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _path
  _path="$( \
    realpath \
      -q -- \
      "${_value}" || \
      true)"
  [[ "${_path}" == "" ]] && \
    _msg_error \
      "${_value} is not a valid path." \
      1
  _set_override \
    "${_obj}" \
    "${_var}" \
    "${_value}"
  _set \
    "${_obj}" \
    "${_var}" \
    "$( \
      realpath -- \
        "$( \
	  _get \
	    "${_obj}" \
            "${_var}")")"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "grub" \
    "compatibility" \
    "false"
  _set_override \
    "read" \
    "only" \
    "false"
  _set_override \
    "device" \
    "label" \
    ""
  _set_override \
    "key" \
    "file" \
    ""
  _set_override \
    "device" \
    "fsuuid" \
    ""
  _set_override \
    "device" \
    "integrity" \
    "hmac-sha512"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage: $(_get "app" "name") [options] <device>
  options:
     -k <key file>        Provide a key file
                          instead of a passphrase.
     -l <label>           Label for the LUKS volume.
     -r                   Whether the volume will be
                          read-only.
                          Default: false
     -t                   Whether to disable integrity
                          layer.
                          Default: false.
     -g                   Whether the volume has to be
                          compatible with GRUB.
                          Default: false
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _build_date \
    _pygmentize_opts=() \
    _key
  _pygmentize_opts=(
    -l bash
    -O "style=emacs,linenos=1"
  )
  TZ=UTC \
    printf \
      -v _build_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _key="$( \
    _get \
      "key" \
      "file")"
  [[ "${_key}" == "" ]] && \
    _key="Passphrase"
  _label="$( \
    _get \
      "device" \
      "label")"
  [[ "${_key}" == "" ]] && \
    _key="None"
  _msg_info "Build date:"
  _msg_info "  ${_build_date}"
  _msg_info "${app_name} configuration:"
  _msg_info "             Device label:   ${device_label:-None}"
  _msg_info "                 Key file:   ${key_file:-Passphrase}"
  _msg_info "         File system UUID:   ${device_fsuuid:-None}"
  _msg_info "                Integrity:   ${device_integrity:-None}"
  _msg_info "       GRUB compatibility:   $(_get "grub" "compatibility")"
  _msg_info "                Read only:   $(_get "read" "only")"
  _msg_info "     Extra format options:   "
  _display_flags                          "${cryptsetup_args[*]}"
  _msg_info ""
  _msg_info "      Device file:"
  _msg_info "        ${device}"
}

# Colorized print
_printf() {
  local \
    _args=()
    _pygmentize_opts=()
  _pygmentize_opts=(
    -g
    -O style=emacs
  )
  _args=(
      "$@"
  )
  # shellcheck disable=SC2059
  _sho \
    "$( \
      printf \
        "${_args[@]}")" \
    "${_pygmentize_opts[@]}"
}

# Colorized Display function
_sho() {
  local \
    _text="${1}" \
    _pygmentize
  _pygmentize="$( \
    command \
      -v \
      "pygmentize"{,2} | \
      head \
        -n \
	1)"
  shift
  _pygmentize_opts=(
    "$@"
  )
  [[ "${color}" == "y" ]] && \
  [[ "${_pygmentize}" != "" ]] && \
    echo \
      "${_text}" | 
      "${_pygmentize}" \
        "${_pygmentize_opts[@]}" && \
    return
  printf \
    "%s\n" \
    "${_text}"
}

_globals
_global_variables

_requirements

# shellcheck disable=SC2034
while \
  getopts \
    'k:l:f:trgcvh?' \
    arg; do
  case \
    "${arg}" in
    k) override_key_file="${OPTARG}" ;;
    l) override_device_label="${OPTARG}" ;;
    f) override_device_fsuuid="${OPTARG}" ;;
    t) override_device_integrity="" ;;
    r) override_read_only="true" ;;
    g) override_grub_compatibility="true" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
device="${1}"
shift 1
cryptsetup_args=(
  "$@"
)
_set_overrides
device="$( \
  realpath \
    "${device}")"
[[ -e "${key_file}" ]] && \
  key_file="$( \
    realpath \
      "${key_file}")"
_show_config
_mkluks \
  "${device}" \
  "${device_label}" \
  "${key_file}" \
  "${device_fsuuid}" \
  "${device_integrity}" \
  "${grub_compatibility}" \
  "${read_only}" \
  "${cryptsetup_args[@]}"
